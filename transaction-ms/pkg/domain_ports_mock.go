// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/ports.go
//
// Generated by this command:
//
//	mockgen -package=pkg -source=internal/domain/ports.go
//
// Package pkg is a generated GoMock package.
package pkg

import (
	domain "joubertredrat/transaction-ms/internal/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAuthorizationService is a mock of AuthorizationService interface.
type MockAuthorizationService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationServiceMockRecorder
}

// MockAuthorizationServiceMockRecorder is the mock recorder for MockAuthorizationService.
type MockAuthorizationServiceMockRecorder struct {
	mock *MockAuthorizationService
}

// NewMockAuthorizationService creates a new mock instance.
func NewMockAuthorizationService(ctrl *gomock.Controller) *MockAuthorizationService {
	mock := &MockAuthorizationService{ctrl: ctrl}
	mock.recorder = &MockAuthorizationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizationService) EXPECT() *MockAuthorizationServiceMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockAuthorizationService) Handle(request domain.AuthorizationRequest) (domain.AuthorizationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", request)
	ret0, _ := ret[0].(domain.AuthorizationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handle indicates an expected call of Handle.
func (mr *MockAuthorizationServiceMockRecorder) Handle(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockAuthorizationService)(nil).Handle), request)
}
